version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - message_network

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - message_network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,INTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
      KAFKA_CREATE_TOPICS: "processed-messages:1:1,to-be-processed:1:1"
    healthcheck:
        test: nc -z kafka 9092 || exit -1
        start_interval: 20s
        interval: 15s
        timeout: 30s
        retries: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - message_network

  message-processor:
    build: message-processor-service
    container_name: message-processor
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - KAFKA_BROKER=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8888:8888"
    networks:
      - message_network
    restart: always

  test-service:
    build: test-service
    container_name: test-service
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - message_network
    restart: always

networks:
  message_network:
    external: true

volumes:
  postgres_data:
