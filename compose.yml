version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - message_network

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - message_network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_MIN_INSYNC_REPLICAS}
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
    healthcheck:
        test: nc -z kafka 9092 || exit -1
        start_period: 20s
        start_interval: 20s
        interval: 15s
        timeout: 30s
        retries: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - message_network
    restart: always

  message-processor:
    build:
      context: .
      dockerfile: message-processor-service/Dockerfile
      args:
        DB_URI: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    container_name: message-processor
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - PORT=${PORT}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${PORT}:${PORT}"
    networks:
      - message_network
    restart: always

  test-service:
    build: test-service
    container_name: test-service
    environment:
      - KAFKA_BROKER=${KAFKA_BROKER}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - message_network
    restart: always

networks:
  message_network:
    external: true