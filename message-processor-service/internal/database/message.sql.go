// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: message.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, content)
VALUES ($1, $2)
RETURNING id, content, status
`

type CreateMessageParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ID, arg.Content)
	var i Message
	err := row.Scan(&i.ID, &i.Content, &i.Status)
	return i, err
}

const getMessagesCount = `-- name: GetMessagesCount :one
SELECT COUNT(*) FROM messages
`

func (q *Queries) GetMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMessagesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProcessedMessagesCount = `-- name: GetProcessedMessagesCount :one
SELECT COUNT(*) FROM messages
WHERE status = 'processed'
`

func (q *Queries) GetProcessedMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProcessedMessagesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE messages
SET status = $2
WHERE id = $1
`

type UpdateMessageStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageStatus, arg.ID, arg.Status)
	return err
}
